package com.javahacks.odx.lsp.dtos;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link DiagnosticElement} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractDiagnosticElementAssert<S extends AbstractDiagnosticElementAssert<S, A>, A extends DiagnosticElement> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractDiagnosticElementAssert}</code> to make assertions on actual DiagnosticElement.
   * @param actual the DiagnosticElement we want to make assertions on.
   */
  protected AbstractDiagnosticElementAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual DiagnosticElement's children contains the given DiagnosticElement elements.
   * @param children the given elements that should be contained in actual DiagnosticElement's children.
   * @return this assertion object.
   * @throws AssertionError if the actual DiagnosticElement's children does not contain all given DiagnosticElement elements.
   */
  public S hasChildren(DiagnosticElement... children) {
    // check that actual DiagnosticElement we want to make assertions on is not null.
    isNotNull();

    // check that given DiagnosticElement varargs is not null.
    if (children == null) failWithMessage("Expecting children parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getChildren(), children);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DiagnosticElement's children contains the given DiagnosticElement elements in Collection.
   * @param children the given elements that should be contained in actual DiagnosticElement's children.
   * @return this assertion object.
   * @throws AssertionError if the actual DiagnosticElement's children does not contain all given DiagnosticElement elements.
   */
  public S hasChildren(java.util.Collection<? extends DiagnosticElement> children) {
    // check that actual DiagnosticElement we want to make assertions on is not null.
    isNotNull();

    // check that given DiagnosticElement collection is not null.
    if (children == null) {
      failWithMessage("Expecting children parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getChildren(), children.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DiagnosticElement's children contains <b>only</b> the given DiagnosticElement elements and nothing else in whatever order.
   * @param children the given elements that should be contained in actual DiagnosticElement's children.
   * @return this assertion object.
   * @throws AssertionError if the actual DiagnosticElement's children does not contain all given DiagnosticElement elements.
   */
  public S hasOnlyChildren(DiagnosticElement... children) {
    // check that actual DiagnosticElement we want to make assertions on is not null.
    isNotNull();

    // check that given DiagnosticElement varargs is not null.
    if (children == null) failWithMessage("Expecting children parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getChildren(), children);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DiagnosticElement's children contains <b>only</b> the given DiagnosticElement elements in Collection and nothing else in whatever order.
   * @param children the given elements that should be contained in actual DiagnosticElement's children.
   * @return this assertion object.
   * @throws AssertionError if the actual DiagnosticElement's children does not contain all given DiagnosticElement elements.
   */
  public S hasOnlyChildren(java.util.Collection<? extends DiagnosticElement> children) {
    // check that actual DiagnosticElement we want to make assertions on is not null.
    isNotNull();

    // check that given DiagnosticElement collection is not null.
    if (children == null) {
      failWithMessage("Expecting children parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getChildren(), children.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DiagnosticElement's children does not contain the given DiagnosticElement elements.
   *
   * @param children the given elements that should not be in actual DiagnosticElement's children.
   * @return this assertion object.
   * @throws AssertionError if the actual DiagnosticElement's children contains any given DiagnosticElement elements.
   */
  public S doesNotHaveChildren(DiagnosticElement... children) {
    // check that actual DiagnosticElement we want to make assertions on is not null.
    isNotNull();

    // check that given DiagnosticElement varargs is not null.
    if (children == null) failWithMessage("Expecting children parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getChildren(), children);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DiagnosticElement's children does not contain the given DiagnosticElement elements in Collection.
   *
   * @param children the given elements that should not be in actual DiagnosticElement's children.
   * @return this assertion object.
   * @throws AssertionError if the actual DiagnosticElement's children contains any given DiagnosticElement elements.
   */
  public S doesNotHaveChildren(java.util.Collection<? extends DiagnosticElement> children) {
    // check that actual DiagnosticElement we want to make assertions on is not null.
    isNotNull();

    // check that given DiagnosticElement collection is not null.
    if (children == null) {
      failWithMessage("Expecting children parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getChildren(), children.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DiagnosticElement has no children.
   * @return this assertion object.
   * @throws AssertionError if the actual DiagnosticElement's children is not empty.
   */
  public S hasNoChildren() {
    // check that actual DiagnosticElement we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have children but had :\n  <%s>";

    // check
    if (actual.getChildren().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getChildren());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual DiagnosticElement's label is equal to the given one.
   * @param label the given label to compare the actual DiagnosticElement's label to.
   * @return this assertion object.
   * @throws AssertionError - if the actual DiagnosticElement's label is not equal to the given one.
   */
  public S hasLabel(String label) {
    // check that actual DiagnosticElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting label of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualLabel = actual.getLabel();
    if (!Objects.areEqual(actualLabel, label)) {
      failWithMessage(assertjErrorMessage, actual, label, actualLabel);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DiagnosticElement's location is equal to the given one.
   * @param location the given location to compare the actual DiagnosticElement's location to.
   * @return this assertion object.
   * @throws AssertionError - if the actual DiagnosticElement's location is not equal to the given one.
   */
  public S hasLocation(StartTagLocation location) {
    // check that actual DiagnosticElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting location of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    StartTagLocation actualLocation = actual.getLocation();
    if (!Objects.areEqual(actualLocation, location)) {
      failWithMessage(assertjErrorMessage, actual, location, actualLocation);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DiagnosticElement's name is equal to the given one.
   * @param name the given name to compare the actual DiagnosticElement's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual DiagnosticElement's name is not equal to the given one.
   */
  public S hasName(String name) {
    // check that actual DiagnosticElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DiagnosticElement is revealable.
   * @return this assertion object.
   * @throws AssertionError - if the actual DiagnosticElement is not revealable.
   */
  public S isRevealable() {
    // check that actual DiagnosticElement we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isRevealable()) {
      failWithMessage("\nExpecting that actual DiagnosticElement is revealable but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DiagnosticElement is not revealable.
   * @return this assertion object.
   * @throws AssertionError - if the actual DiagnosticElement is revealable.
   */
  public S isNotRevealable() {
    // check that actual DiagnosticElement we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isRevealable()) {
      failWithMessage("\nExpecting that actual DiagnosticElement is not revealable but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DiagnosticElement's type is equal to the given one.
   * @param type the given type to compare the actual DiagnosticElement's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual DiagnosticElement's type is not equal to the given one.
   */
  public S hasType(String type) {
    // check that actual DiagnosticElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
